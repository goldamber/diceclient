//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameGrid", Namespace="http://schemas.datacontract.org/2004/07/Host")]
    [System.SerializableAttribute()]
    public partial class GameGrid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CrdColField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CrdRowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceRef.GridType MoveTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CrdCol {
            get {
                return this.CrdColField;
            }
            set {
                if ((this.CrdColField.Equals(value) != true)) {
                    this.CrdColField = value;
                    this.RaisePropertyChanged("CrdCol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CrdRow {
            get {
                return this.CrdRowField;
            }
            set {
                if ((this.CrdRowField.Equals(value) != true)) {
                    this.CrdRowField = value;
                    this.RaisePropertyChanged("CrdRow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceRef.GridType MoveType {
            get {
                return this.MoveTypeField;
            }
            set {
                if ((this.MoveTypeField.Equals(value) != true)) {
                    this.MoveTypeField = value;
                    this.RaisePropertyChanged("MoveType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Num {
            get {
                return this.NumField;
            }
            set {
                if ((this.NumField.Equals(value) != true)) {
                    this.NumField = value;
                    this.RaisePropertyChanged("Num");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GridType", Namespace="http://schemas.datacontract.org/2004/07/Host")]
    public enum GridType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BrownStart = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BrownEnd = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NavyStart = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NavyEnd = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartEnd = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddClient", ReplyAction="http://tempuri.org/IService/AddClientResponse")]
        void AddClient(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddClient", ReplyAction="http://tempuri.org/IService/AddClientResponse")]
        System.Threading.Tasks.Task AddClientAsync(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBoard", ReplyAction="http://tempuri.org/IService/GetBoardResponse")]
        Client.ServiceRef.GameGrid[] GetBoard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBoard", ReplyAction="http://tempuri.org/IService/GetBoardResponse")]
        System.Threading.Tasks.Task<Client.ServiceRef.GameGrid[]> GetBoardAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Move", ReplyAction="http://tempuri.org/IService/MoveResponse")]
        Client.ServiceRef.GameGrid Move(int id, int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Move", ReplyAction="http://tempuri.org/IService/MoveResponse")]
        System.Threading.Tasks.Task<Client.ServiceRef.GameGrid> MoveAsync(int id, int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OponentPos", ReplyAction="http://tempuri.org/IService/OponentPosResponse")]
        Client.ServiceRef.GameGrid OponentPos(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OponentPos", ReplyAction="http://tempuri.org/IService/OponentPosResponse")]
        System.Threading.Tasks.Task<Client.ServiceRef.GameGrid> OponentPosAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckCl", ReplyAction="http://tempuri.org/IService/CheckClResponse")]
        bool CheckCl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckCl", ReplyAction="http://tempuri.org/IService/CheckClResponse")]
        System.Threading.Tasks.Task<bool> CheckClAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckMove", ReplyAction="http://tempuri.org/IService/CheckMoveResponse")]
        bool CheckMove(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckMove", ReplyAction="http://tempuri.org/IService/CheckMoveResponse")]
        System.Threading.Tasks.Task<bool> CheckMoveAsync(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckIfWon", ReplyAction="http://tempuri.org/IService/CheckIfWonResponse")]
        bool CheckIfWon(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckIfWon", ReplyAction="http://tempuri.org/IService/CheckIfWonResponse")]
        System.Threading.Tasks.Task<bool> CheckIfWonAsync(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DelClient", ReplyAction="http://tempuri.org/IService/DelClientResponse")]
        void DelClient(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DelClient", ReplyAction="http://tempuri.org/IService/DelClientResponse")]
        System.Threading.Tasks.Task DelClientAsync(int num);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceRef.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.ServiceRef.IService>, Client.ServiceRef.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddClient(int num) {
            base.Channel.AddClient(num);
        }
        
        public System.Threading.Tasks.Task AddClientAsync(int num) {
            return base.Channel.AddClientAsync(num);
        }
        
        public Client.ServiceRef.GameGrid[] GetBoard() {
            return base.Channel.GetBoard();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceRef.GameGrid[]> GetBoardAsync() {
            return base.Channel.GetBoardAsync();
        }
        
        public Client.ServiceRef.GameGrid Move(int id, int num) {
            return base.Channel.Move(id, num);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceRef.GameGrid> MoveAsync(int id, int num) {
            return base.Channel.MoveAsync(id, num);
        }
        
        public Client.ServiceRef.GameGrid OponentPos(int id) {
            return base.Channel.OponentPos(id);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceRef.GameGrid> OponentPosAsync(int id) {
            return base.Channel.OponentPosAsync(id);
        }
        
        public bool CheckCl() {
            return base.Channel.CheckCl();
        }
        
        public System.Threading.Tasks.Task<bool> CheckClAsync() {
            return base.Channel.CheckClAsync();
        }
        
        public bool CheckMove(int num) {
            return base.Channel.CheckMove(num);
        }
        
        public System.Threading.Tasks.Task<bool> CheckMoveAsync(int num) {
            return base.Channel.CheckMoveAsync(num);
        }
        
        public bool CheckIfWon(int num) {
            return base.Channel.CheckIfWon(num);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfWonAsync(int num) {
            return base.Channel.CheckIfWonAsync(num);
        }
        
        public void DelClient(int num) {
            base.Channel.DelClient(num);
        }
        
        public System.Threading.Tasks.Task DelClientAsync(int num) {
            return base.Channel.DelClientAsync(num);
        }
    }
}
